3. drop :	used to drop cosntraints and columns.
	syntax:
	ALTER TABLE table_name
	DROP CONSTRAINT constr_name

	for removing UNIQUE and PRIMARY key, you need not to know about the constraint name.
	syntax for UNIQUE:
	ALTER TABLE table_name
	DROP UNIQUE(col_name)

	syntax for PRIMARY KEY:
	ALTER TABLE table_name
	DROP PRIMARY KEY

	
	column droping has been introduced in oracle8i. in this we can drop a single column in an execution of drop option. if you want to remove mutiple columns you need to execute the same command no. of times. from oracle9i in a single execution of this command, you can drop multiple columns in a single execution of ALTER TABLE command.
	oracle 8i:
	syntax:
	ALTER TABLE table_name
	DROP COLUMN col_name

	oracle 9i
	syntax:
	ALTER TABLE table_name
	DROP(col1,col2,col3.....................)


4) DISABLE: used to disable action of a constriant.
	syntax:
	ALTER TABLE table_name
	DISABLE CONSTRAINT constraint_name

5) ENABLE : used to enable a disabled constraint. that is geting a constraint in to action.
	syntax:
	ALTER TABLE table_name
	ENABLE CONSTRAINT constraint_name
dwhen we try to enable the constraint, system checks the data whether it violates the nature of constraint or not. if not, constraint is going to be enabled else returns corresponding error message.


SQL> create table giri
  2  (stdno number unique,
  3  stdname varchar2(25),
  4  stdaddress varchar2(25));
Table created.

SQL> insert into giri
  2  values(1,'Giri','Guntur');
1 row created.

SQL> insert into giri
  2  values(1,'Sarraju','Tirupati');
insert into giri
            *
ERROR at line 1:
ORA-00001: unique constraint (SCOTT.SYS_C00699) violated


SQL> select * from user_Constraints where table_name='GIRI';

OWNER                          CONSTRAINT_NAME                C TABLE_NAME
------------------------------ ------------------------------ - --------------
SEARCH_CONDITION
------------------------------------------------------------------------------
R_OWNER                        R_CONSTRAINT_NAME              DELETE_RU STATUS
------------------------------ ------------------------------ --------- ------
DEFERRED  VALIDATED     GENERATED      BAD LAST_CHAN
--------- ------------- -------------- --- ---------
SCOTT                          SYS_C00699                     U GIRI

                                                                        ENABLE
IMMEDIATE VALIDATED     GENERATED NAME     22-APR-04


SQL> alter table giri
  2  disable constraint sys_c00699;
Table altered.

SQL> select * from user_Constraints where table_name='GIRI';

OWNER                          CONSTRAINT_NAME                C TABLE_NAME
------------------------------ ------------------------------ - --------------
SEARCH_CONDITION
------------------------------------------------------------------------------
R_OWNER                        R_CONSTRAINT_NAME              DELETE_RU STATUS
------------------------------ ------------------------------ --------- ------
DEFERRED  VALIDATED     GENERATED      BAD LAST_CHAN
--------- ------------- -------------- --- ---------
SCOTT                          SYS_C00699                     U GIRI

                                                                        DISABL
IMMEDIATE NOT VALIDATED GENERATED NAME     22-APR-04


SQL> insert into giri
  2  values(1,'Sarraju','Tirupati');
1 row created.

SQL> alter table giri
  2  enable constraint sys_c00699;
alter table giri
*
ERROR at line 1:
ORA-02299: cannot enable (SCOTT.SYS_C00699) - duplicate keys found


SQL> alter table giri
  2  drop constraint sys_c00699;
Table altered.

SQL> alter table giri
  2  add(unique(stdno));
alter table giri
*
ERROR at line 1:
ORA-02299: cannot enable (SCOTT.SYS_C00700) - duplicate keys found


SQL> delete from giri where stdname='Sarraju';
1 row deleted.

SQL> alter table giri
  2  add(unique(stdno));
Table altered.

SQL> alter table giri
  2  drop unique(Stdno);
Table altered.
=======================================================
we do have 2 types of functions
1. Single row functions
2. Group or aggregate functions


2. Group or aggreagate functions:
i. Sum: returns total of a column.
	syntax:	SUM(col_name)
ii. Avg:  returns average of a column.
	syntax:	AVG(col_name)
iii. Max: returns maximum value of a column.
	syntax:	MAX(col_name)
iv. Min: returns minimum value of a column.
	syntax:	MIN(col_name)
v. stddev: returns standard deviation of a column.
	syntax:	STDDEV(col_name)
vi. Variance : returns variance of a column.
	syntax:	VARIANCE(col_name)
vii. Count: returns howmany rows available in a column or table.
	syntax:	COUNT(col_name or *)

note: when we implement count function on an individual column, system returns howmany rows available by excluding null values from the count.


SQL> select sum(sal) from emp;

 SUM(SAL)
---------
    29025

SQL> select avg(Sal) from emp;

 AVG(SAL)
---------
2073.2143

SQL> select max(sal) from emp;

 MAX(SAL)
---------
     5000

SQL> select min(Sal) from emp;

 MIN(SAL)
---------
      800

SQL> select stddev(sal) from emp;

STDDEV(SAL)
-----------
  1182.5032

SQL> select variance(sal) from emp;

VARIANCE(SAL)
-------------
    1398313.9

SQL> select count(*) from emp;

 COUNT(*)
---------
       14

SQL> select count(sal) from emp;

COUNT(SAL)
----------
        14

SQL> select count(comm) from emp;

COUNT(COMM)
-----------
          4
==
Group by Clause: This one groups a column. result would be supressing duplicate rows from display.
	syntax:	GROUP BY col_name {HAVING condition}

note: Where clause has to be used before GROUP BY clause and having clause should be used after GROUP BY clause.
ex:
SQL> select deptno,sal from emp;

   DEPTNO       SAL
--------- ---------
       20       800
       30      1600
       30      1250
       20      2975
       30      1250
       30      2850
       10      2450
       20      3000
       10      5000
       30      1500
       20      1100
       30       950
       20      3000
       10      1300

14 rows selected.

SQL> select deptno from emp group by deptno;

   DEPTNO
---------
       10
       20
       30

SQL> select deptno,sum(Sal) from emp group by deptno;

   DEPTNO  SUM(SAL)
--------- ---------
       10      8750
       20     10875
       30      9400

SQL> select deptno,max(sal) from emp group by deptno;

   DEPTNO  MAX(SAL)
--------- ---------
       10      5000
       20      3000
       30      2850

SQL> select deptno,max(sal) from emp where deptno=10
  2  group by deptno;

   DEPTNO  MAX(SAL)
--------- ---------
       10      5000

SQL> select deptno,sum(sal) from emp
  2  group by deptno having sum(sal)>=9000;

   DEPTNO  SUM(SAL)
--------- ---------
       20     10875
       30      9400
===================
DUAL: this is a system table which does have one column and one row.
column:	DUMMY 	datatype: VARCHAR2(1)
row: X

SQL> SELECT 10*2 FROM DUAL;

     10*2
---------
       20

SQL> SELECT 'NAGAMANI' from dual;

'NAGAMAN
--------
NAGAMANI

SQL> select 'nagamani' from tab;

'NAGAMAN
--------
nagamani
nagamani
nagamani
nagamani
nagamani
nagamani
nagamani
nagamani
nagamani
nagamani
nagamani
nagamani
nagamani
nagamani

14 rows selected.
===========
Singe Row functions:
	we do have 5 types of single row functions.
1. Numaric Functions
2. String Functions
3. Date functions
4. Conversion functions
5. Miscellanious or Other functions

Numaric Functions:
i. ABS: returns negartive number as a positive number.
	sy: ABS(n)
ii. MOD: Returns remainder of a column.
	syntax:	MOD(m,n)
m: Numarator
n : Denominator
iii. CEIL: returns the given number by rounding it to the next number in case of float. if it is round number, the same number is going to be returned.
	syntax:	CEIL(n)
iv. FLOOR: returns the given number by removing float portion. if it is round number the same number will be returned.
	syntax:	FLOOR(n)
v. Sign: by using this you can know the given number is a positive or negative or zero.
	syntaX:	SIGN(n)
this one returns 1 if the given number is positive number.
returns -1 if the given number is negative number
returns 0 if the given numbre is zero.
vi. POWER:  returns result by multiplying the given number to itself by the given no. of times.
	syntaX:	 POWER(m,n)
m: main number
n: power

vii. Sqrt: returns square root of the given number.
	syntaX:	SQRT(n)
viii. Round: returns a number by rounding it.
	syntax:
	ROUND(M{,n})
m: main number
n: at what postion you want to round the given number after decimal point.
ix. trunc: returns no. by removing float portion.
	syntaX:
	TRUNC(m{,n}
	n: specify the position after decimal point from where you want to remove decimal portion.
 

ex:
SQL> select abs(-190) from dual;

ABS(-190)
---------
      190

SQL> select mod(5,2) from dual;

 MOD(5,2)
---------
        1

SQL> select ceil(10.11) from dual;

CEIL(10.11)
-----------
         11

SQL> select ceil(10) from dual;

 CEIL(10)
---------
       10

SQL> select ceil(10.4) from dual;

CEIL(10.4)
----------
        11

SQL> select floor(10.888) from dual;

FLOOR(10.888)
-------------
           10

SQL> select floor(10) from dual;

FLOOR(10)
---------
       10



SQL> select sqrt(25) from dual;

 SQRT(25)
---------
        5

SQL> select power(5,3) from dual;

POWER(5,3)
----------
       125

SQL> select sign(100) from dual;

SIGN(100)
---------
        1

SQL> select sign(-100) from dual;

SIGN(-100)
----------
        -1

SQL> select sign(0) from dual;

  SIGN(0)
---------
        0

SQL> select round(100.778) from dual;

ROUND(100.778)
--------------
           101

SQL> select round(100.778,2) from dual;

ROUND(100.778,2)
----------------
          100.78

SQL> select trunc(100.778) from dual;

TRUNC(100.778)
--------------
           100

SQL> select trunc(100.778,2) from dual;

TRUNC(100.778,2)
----------------
          100.77
=====================================================\
II) String Functions:
1. UPPER: converts string into uppercase string.
	syntax:	UPPER(string)
2. LOWER: Returns string by coverting into lowercase string.
	syntax:	LOWER(string)
3. INITCAP: returns string by coverting first in each word as uppercase letter and remaining into lowercase.
	syntax:
	INITCAP(string)
4. SUBSTR: returns a part of string.
	syntax:
	SUBSTR(string,n{,m})
n: starting position
m: no. of letter you need after starting position.
5. INSTR: returns position of a string in an another stirng.
	syntax:
	INSTR(string1,string2{,n{,m}})
n:starting position from where the searching will be started.
m: no. of occurance
6. Length: returns length of the string.
	syntax:	LENGTH(string)
7. ASCII: returns ascii value of the given chracter.
	syntax:	ASCII(character)
8. CHR: returns character associated to the given ascii value.
	syntaX:	CHR(n)
9. LTRIM: trims left side of the string.
	syntax:
	LTRIM(string1{,string2})
if u do not specify string2 this one removes space available in the left side of string1. if you specify string2, ltrim removes string2 if it available in the left side of string1.
10. RTRIM : viceversa of LTRIM.
	syntax:
	RTRIM(string1{,string2})
11. LPAD: This functions pads string2 repeatedly upto the specified maximum length to the left side of string1.
	syntax:
	LPAD(string1,n,string2)
n: max length
12. RPAD: viceversa of LPAD.
	syntax:
	RPAD(string1,n,string2)
13. REVERSE: returns string by reversing it.
	syntax:
	REVERSE(string)

Demo:
SQL> select upper('oracle corporation') from dual;

UPPER('ORACLECORPO
------------------
ORACLE CORPORATION

SQL> select lower('oracle corporation') from dual;

LOWER('ORACLECORPO
------------------
oracle corporation

SQL> select initcap('oracle CORPORATION') from dual;

INITCAP('ORACLECOR
------------------
Oracle Corporation

SQL> select substr('oracle',2) from dual;

SUBST
-----
racle

SQL> select substr('oracle',2,3) from dual;

SUB
---
rac

SQL> select instr('oracle corporation','or') from dual;

INSTR('ORACLECORPORATION','OR')
-------------------------------
                              1

SQL> select instr('oracle corporation','or',1,3) from dual

INSTR('ORACLECORPORATION','OR',1,3)
-----------------------------------
                                 12

SQL> select ascii('a') from dual;

ASCII('A')
----------
        97

SQL> select chr(97) from dual;

C
-
a

SQL> select ltrim('    oracle') from dual;

LTRIM(
------
oracle

SQL> select ltrim('oracle','ora') from dual;

LTR
---
cle

SQL> select rtrim('oracle    ') from dual;

RTRIM(
------
oracle

SQL> select rtrim('oracle','cle') from dual;

RTR
---
ora

SQL> select lpad('oracle',20,'*') from dual;

LPAD('ORACLE',20,'*'
--------------------
**************oracle

SQL> select lpad('oracle',20,'prs') from dual;

LPAD('ORACLE',20,'PR
--------------------
prsprsprsprsproracle

SQL> select rpad('oracle',20,'*') from dual;

RPAD('ORACLE',20,'*'
--------------------
oracle**************

SQL> select rpad('oracle',20,'prs') from dual;

RPAD('ORACLE',20,'PR
--------------------
oracleprsprsprsprspr


SQL> SELECT * FROM NAGAM;

    STDNO STDNAME                   STDADDRESS
--------- ------------------------- -----------------------
        1 Giri                      Guntur
        2 Nagamani                  GunTur
        3 vamsi                     Hyderabad
        4 Madhavi                   GuntuR

SQL> select * from nagam where stdaddress='Guntur';

    STDNO STDNAME                   STDADDRESS
--------- ------------------------- -----------------------
        1 Giri                      Guntur

SQL> select * from nagam where upper(Stdaddress)='GUNTUR';

    STDNO STDNAME                   STDADDRESS
--------- ------------------------- -----------------------
        1 Giri                      Guntur
        2 Nagamani                  GunTur
        4 Madhavi                   GuntuR

SQL> commit;

Commit complete.

SQL> update nagam set stdaddress=upper(stdaddress);

4 rows updated.

SQL> select * from nagam;

    STDNO STDNAME                   STDADDRESS
--------- ------------------------- -----------------------
        1 Giri                      GUNTUR
        2 Nagamani                  GUNTUR
        3 vamsi                     HYDERABAD
        4 Madhavi                   GUNTUR

if we do have a column stdaddress with CHAR(25) datatype the following demo will be applicable.

SQL> select * from nagam;

    STDNO STDNAME                   STDADDRESS
--------- ------------------------- --------------------
        1 Vamsi                     Guntur
        2 Giri                      Tenali
        3 Chandu                    Guntur
        4 Nagamani                  TenaLI

SQL> select length(stdaddress) from nagam;

LENGTH(STDADDRESS)
------------------
                25
                25
                25
                25

SQL> select length(rtrim(stdaddress)) from nagam;

LENGTH(RTRIM(STDADDRESS))
-------------------------
                        6
                        6
                        6
                        6
============================
iii) Date functions:
We do have a system variable "SYSDATE" which does current system date and time.the nature of this variable will be DATE type.


1. ADD_MONTHS: 
	Returns date by adding given no. of months to the given date.
	syntax:
	ADD_MONTH(date,n)
2. MONTHS_BETWEEN:
	Returns months in between given two date.
	syntax:
	MONTHS_BETWEEN(date1,date2)
3. LAST_DAY:
	Returns date of last day in the specified month.
	syntax:
	LAST_DAY(date)
4. NEXT_dAY:
	Returns date of the given day after the given date.
	syntax:
	NEXT_DAY(date,day)
Demo:
SQL> select add_months(sysdate,4) from dual;

ADD_MONTH
---------
28-AUG-04

SQL> select months_between(sysdate,'28-Jan-04') from dual;

MONTHS_BETWEEN(SYSDATE,'28-JAN-04')
-----------------------------------
                                  3

SQL> select last_day('1-feb-04') from dual;

LAST_DAY(
---------
29-FEB-04

SQL> select last_day('1-feb-05') from dual;

LAST_DAY(
---------
28-FEB-05

SQL> select next_day(sysdate,'Sunday') from dual;

NEXT_DAY(
---------
02-MAY-04
===
4)Miscellanious or Other Functions:

1. user: returns current working user name.
	syntaX:	 USER
2. UID: returns user id of the current working user. this id basically prepared by the system when this user has been created.
	syntax:
	UID
3. GREATEST: returns maximum value in the given values list.
	syntax:
	GREATEST(value1,value2,value3....)
4. LEAST: returns minimum value in the given values list.
	syntax:
	LEAST(value1,value2,value3......)
5. NVL: null value function : this one returns the specified value in the location of null values of a column data.
	syntax:
	NVL(col_name,value)
6. VSIZE: returns howmany bytes are going to be or occupied by the given entry.
	syntax:
	VSIZE(col_name or value)


SQL> select user from dual;

USER
------------------------------
SCOTT

SQL> select uid from dual;

      UID
---------
       20

SQL> select greatest(100,200,300) from dual;

GREATEST(100,200,300)
---------------------
                  300

SQL> select least(100,299,33) from dual;

LEAST(100,299,33)
-----------------
               33

SQL> select empno,ename,sal,comm from emp;

    EMPNO ENAME            SAL COMM
--------- ---------- --------- -----------
     7369 SMITH            800          
     7499 ALLEN           1600         300
     7521 WARD            1250         500
     7566 JONES           2975           
     7654 MARTIN          1250        1400
     7698 BLAKE           2850           
     7782 CLARK           2450           0
     7788 SCOTT           3000           
     7839 KING            5000           
     7844 TURNER          1500      
     7876 ADAMS           1100      
     7900 JAMES            950        
     7902 FORD            3000       
     7934 MILLER          1300     

14 rows selected.
SQL> select empno,ename,sal,nvl(comm,0) from emp;

    EMPNO ENAME            SAL NVL(COMM,0)
--------- ---------- --------- -----------
     7369 SMITH            800           0
     7499 ALLEN           1600         300
     7521 WARD            1250         500
     7566 JONES           2975           0
     7654 MARTIN          1250        1400
     7698 BLAKE           2850           0
     7782 CLARK           2450           0
     7788 SCOTT           3000           0
     7839 KING            5000           0
     7844 TURNER          1500           0
     7876 ADAMS           1100           0
     7900 JAMES            950           0
     7902 FORD            3000           0
     7934 MILLER          1300           0

14 rows selected.

SQL> select vsize('oracle') from dual;

VSIZE('ORACLE')
---------------
              6

SQL> select greatest('a','A','b','z') from dual;

G
-
z

SQL> select least('a','A','b','z') from dual;

L
-
A


5) Conversion Functions:
i. TO_NUMBER: converts string natured numaric value into numaric nature.
	syntax:
	TO_NUMBER(n)
ii. TO_CHAR: converts numaric nature numaric value into string nature numaric value.
	syntax:	TO_CHAR(n)
converts date nature date value into character nature date value.
	syntax:	TO_CHAR(date{,format})

SQL> select sysdate from dual;

SYSDATE
---------
28-APR-04

SQL> select sysdate from dual;

SYSDATE
---------
30-APR-04

SQL> select to_char(sysdate) from dual;

TO_CHAR(S
---------
30-APR-04

SQL> select to_char(sysdate,'d') from dual;

T
-
6

SQL> select to_char(sysdate,'dd') from dual;

TO
--
30

SQL> select to_Char(sysdate,'ddd') from dual;

TO_
---
121

SQL> select to_char(sysdate,'Day') from dual;

TO_CHAR(S
---------
Friday

SQL> select to_char(sysdate,'DAY') from dual;

TO_CHAR(S
---------
FRIDAY

SQL> select to_char(sysdate,'DAy') from dual;

TO_CHAR(S
---------
FRIDAY

SQL> select to_char(sysdate,'mm') from dual;

TO
--
04

SQL> select to_char(sysdate,'Mon') from dual;

TO_
---
Apr

SQL> select to_char(sysdate,'Month') from dual;

TO_CHAR(S
---------
April

SQL> select to_Char(sysdate,'y') from dual;

T
-
4

SQL> select to_char(sysdate,'yy') from dual;

TO
--
04

SQL> select to_char(sysdate,'yyy') from dual;

TO_
---
004

SQL> select to_char(sysdate,'yyyy') from dual;

TO_C
----
2004

SQL> select to_char(sysdate,'y,yyy') from dual;

TO_CH
-----
2,004

SQL> select to_char(sysdate,'Year') from dual;

TO_CHAR(SYSDATE,'YEAR')
------------------------------------------
Two Thousand Four

SQL> select to_char(sysdate,'w') from dual;

T
-
5

SQL> select to_char(sysdate,'ww') from dual;

TO
--
18

SQL> select to_char(sysdate,'hh24') from dual;

TO
--
08

SQL> select to_char(sysdate,'mi') from dual;

TO
--
40

SQL> select to_char(sysdate,'ss') from dual;

TO
--
23

SQL> select to_char(sysdate,'hh24:mi:ss') from dual;

TO_CHAR(
--------
08:40:32

SQL> select to_char(sysdate,'dd-Month-YYYY hh24:mi:ss') from dual;

TO_CHAR(SYSDATE,'DD-MONTH-
--------------------------
30-April    -2004 08:40:52

SQL> select to_char(sysdate,'dd-Month-YYYY hh24:mi:ss') from dual;

TO_CHAR(SYSDATE,'DD-MONTH-
--------------------------
30-December -2004 08:41:26

SQL> select to_char(sysdate,'ddth MM') from dual;

TO_CHAR
-------
30th 12

SQL> select to_char(sysdate,'ddth MM') from dual;

TO_CHAR
-------
01st 12

SQL> select to_char(sysdate,'ddth Month') from dual;

TO_CHAR(SYSDAT
--------------
01st December

SQL> /

TO_CHAR(SYSDAT
--------------
30th April

SQL> /

TO_CHAR(SYSDAT
--------------
03rd April


3) TO_DATE: converts character nature date values into DATE nature.
	syntax:
	TO_DATE(value,format)
Demo:
SQL> create table nagam1
  2  (Stdno number,
  3  stdname varchar2(25),
  4  jdate date);

Table created.

SQL> insert into nagam1
  2  values(1,'Nagamani','11-Oct-04');

1 row created.

SQL> insert into nagam1
  2  values(2,'Vamsi','10-04-04');
values(2,'Vamsi','10-04-04')
                 *
ERROR at line 2:
ORA-01843: not a valid month


SQL> insert into nagam1
  2  values(2,'Vamsi',to_date('10-04-04','dd-mm-yy'));

1 row created.

SQL> select * from nagam1;

    STDNO STDNAME                   JDATE
--------- ------------------------- ---------
        1 Nagamani                  11-OCT-04
        2 Vamsi                     10-APR-04

SQL> select stdno,stdname,to_char(jdate,'dd:mm:yy') from nagam1;

    STDNO STDNAME                   TO_CHAR(
--------- ------------------------- --------
        1 Nagamani                  11:10:04
        2 Vamsi                     10:04:04

SQL> select stdno,stdname,to_char(jdate,'dd:mm:yyyy') from nagam1;

    STDNO STDNAME                   TO_CHAR(JD
--------- ------------------------- ----------
        1 Nagamani                  11:10:2004
        2 Vamsi                     10:04:2004

SQL> select stdno,stdname,to_char(jdate,'dd:Mon:yyyy') from nagam1;

    STDNO STDNAME                   TO_CHAR(JDA
--------- ------------------------- -----------
        1 Nagamani                  11:Oct:2004
        2 Vamsi                     10:Apr:2004

SQL> select stdno,stdname,to_char(jdate,'hh24:mi:ss') from nagam1;

    STDNO STDNAME                   TO_CHAR(
--------- ------------------------- --------
        1 Nagamani                  00:00:00
        2 Vamsi                     00:00:00

SQL> select stdno,stdname,to_char(jdate,'dd:Mon:yyyy'),
  2  to_char(jdate,'hh24:mi:ss') from nagam1;

    STDNO STDNAME                   TO_CHAR(JDA TO_CHAR(
--------- ------------------------- ----------- --------
        1 Nagamani                  11:Oct:2004 00:00:00
        2 Vamsi                     10:Apr:2004 00:00:00

SQL> insert into nagam1
  2  values(3,'Giri','11:10');
values(3,'Giri','11:10')
                *
ERROR at line 2:
ORA-01843: not a valid month


SQL> insert into nagam1
  2  values(3,'Giri',to_date('11:10','hh24:mi'));

1 row created.

SQL> select stdno,stdname,to_char(jdate,'dd:Mon:yyyy'),
  2  to_char(jdate,'hh24:mi:ss') from nagam1;

    STDNO STDNAME                   TO_CHAR(JDA TO_CHAR(
--------- ------------------------- ----------- --------
        1 Nagamani                  11:Oct:2004 00:00:00
        2 Vamsi                     10:Apr:2004 00:00:00
        3 Giri                      01:Apr:2004 11:10:00

SQL> insert into nagam1
  2  values(3,'Giri',to_date('30-Apr-04 7:15','dd-Mon-yy hh24:mi'));

1 row created.

SQL> select stdno,stdname,to_char(jdate,'dd:Mon:yyyy'),
  2  to_char(jdate,'hh24:mi:ss') from nagam1;

    STDNO STDNAME                   TO_CHAR(JDA TO_CHAR(
--------- ------------------------- ----------- --------
        1 Nagamani                  11:Oct:2004 00:00:00
        2 Vamsi                     10:Apr:2004 00:00:00
        3 Giri                      01:Apr:2004 11:10:00
        3 Giri                      30:Apr:2004 07:15:00
===============================
Pseudo columns: 
	The columns which have been defined by the system and cann't be modified by the user.
we do have 2 pesudo columns regarding table.
1. ROWNUM	: returns no. for each row according to the order of rows under the table.
2. ROWID : returns address of the row.  this is unique for total database.

Note: When doing dml commands, in where clause in combination of ROWNUM and "=" u can refer only very first row. that meanss rownum=1


Demo:
SQL> select rownum,rowid,stdno,stdname,stdaddress from nagam;

   ROWNUM ROWID                  STDNO STDNAME                  
--------- ------------------ --------- -----------------------
        1 AAAAiVAACAAAAHjAAA         1 Vamsi                    
        2 AAAAiVAACAAAAHjAAB         2 Giri                     
        3 AAAAiVAACAAAAHjAAC         3 Chandu                   
        4 AAAAiVAACAAAAHjAAD         4 Nagamani                 

Rownum will be failed when we refer other than 1 in combination of = operator.
ex:
SQL> select rownum,rowid,stdno,stdname,stdaddress from na

   ROWNUM ROWID                  STDNO STDNAME                  
--------- ------------------ --------- ------------------
        1 AAAAiVAACAAAAHjAAA         1 Vamsi                    
        2 AAAAiVAACAAAAHjAAB         2 Giri                     
        3 AAAAiVAACAAAAHjAAC         3 Chandu                   
        4 AAAAiVAACAAAAHjAAD         4 Nagamani                 
        5 AAAAiVAACAAAAHjAAE         4 Nagamani                 

SQL> delete from nagam where rownum=5;

0 rows deleted.

SQL> delete from nagam where rownum=1;

1 row deleted.

SQL> rollback;

Rollback complete.

SQL> select * from nagam where rownum=1;

    STDNO STDNAME                   STDADDRESS
--------- ------------------------- ---------------------
        1 Vamsi                     Guntur

SQL> c/1/2
  1* select * from nagam where rownum=2
SQL> r
  1* select * from nagam where rownum=2

no rows selected

dEMO FOR ROWID:
SQL> select rownum,rowid,stdno,stdname,stdaddress from nagam;

   ROWNUM ROWID                  STDNO STDNAME                  
--------- ------------------ --------- -----------------------
        1 AAAAiVAACAAAAHjAAA         1 Vamsi                    
        2 AAAAiVAACAAAAHjAAB         2 Giri                     
        3 AAAAiVAACAAAAHjAAC         3 Chandu                   
        4 AAAAiVAACAAAAHjAAD         4 Nagamani                 
        5 AAAAiVAACAAAAHjAAE         4 Nagamani                 

SQL> delete from nagam where rowid='AAAAiVAACAAAAHjAAE';

1 row deleted.

SQL> SELECT * FROM NAGAM;

    STDNO STDNAME                   STDADDRESS
--------- ------------------------- -------------------------
        1 Vamsi                     Guntur
        2 Giri                      Tenali
        3 Chandu                    Guntur
        4 Nagamani                  TenaLI
=======================================================
